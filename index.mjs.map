{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport expm1 from '@stdlib/math-base-special-expm1';\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a Planck distribution with shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 4.0, 0.3 );\n* // returns ~0.0781\n*\n* @example\n* var y = pmf( 2.0, 1.7 );\n* // returns ~0.0273\n*\n* @example\n* var y = pmf( -1.0, 2.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid shape parameter:\n* var y = pmf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction pmf( x, lambda ) {\n\tif ( isnan( x ) || isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\treturn -expm1( -lambda ) * exp( -lambda * x );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nexport default pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport exp from '@stdlib/math-base-special-exp';\nimport expm1 from '@stdlib/math-base-special-expm1';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a Planck distribution with shape parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.0878\n*\n* y = pmf( 1.0 );\n* // returns ~0.2387\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a Planck distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\treturn -expm1( -lambda ) * exp( -lambda * x );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Planck distribution probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-planck-pmf\n*\n* @example\n* import pmf from '@stdlib/stats-base-dists-planck-pmf';\n*\n* var y = pmf( 4.0, 0.3 );\n* // returns ~0.0781\n*\n* y = pmf( 2.0, 1.7 );\n* // returns ~0.0273\n*\n* y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 0.5 );\n* y = mypmf( 3.0 );\n* // returns ~0.0878\n*\n* y = mypmf( 1.0 );\n* // returns ~0.2387\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["pmf","x","lambda","isnan","NaN","isNonNegativeInteger","expm1","exp","factory","constantFunction","setReadOnly","main"],"mappings":";;gnBA8DA,SAASA,EAAKC,EAAGC,GAChB,OAAKC,EAAOF,IAAOE,EAAOD,IAAYA,GAAU,EACxCE,IAEHC,EAAsBJ,IAClBK,GAAQJ,GAAWK,GAAML,EAASD,GAEpC,CACR,CCzBA,SAASO,EAASN,GACjB,OAAKC,EAAOD,IAAYA,GAAU,EAC1BO,EAAkBL,KAe1B,SAAcH,GACb,GAAKE,EAAOF,GACX,OAAOG,IAER,GAAKC,EAAsBJ,GAC1B,OAAQK,GAAQJ,GAAWK,GAAML,EAASD,GAE3C,OAAO,CACP,CACF,CCjBAS,EAAAC,EAAA,UAAAH"}